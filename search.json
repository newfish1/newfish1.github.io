[{"title":"试用期docker使用","url":"/posts/bdbb890b.html","content":"Docker 常用命令其他文档笔记地址\n(云原生开发)\n容器基本命令查看当前运行的容器\ndocker ps\n\n进入已经运行的容器\ndocker exec -it &lt;容器ID或容器名&gt; &lt;终端类型&gt;\n\n删除历史容器\ndocker container prune\n\nDockerfile生成镜像\ndocker build -t 镜像名字:tag .\n\n停止所有容器\ndocker stop $(docker ps -q)\n\n删除所有停止的容器\ndocker rm $(docker ps -aq --filter &quot;status=exited&quot;)\n\n停止所有容器\ndocker stop $(docker ps -q)\n\nMySql相关单独运行mysql:8.0 镜像\ndocker run -d  --name mysql-server  -p 3306:3306   -v /data/mysqldata:/var/lib/mysql   -v /conf/mysqlconf:/etc/mysql/conf.d  -e MYSQL_ROOT_PASSWORD=djx55707   mysql:8.0  \n\nDocker中mysql创建库表\n# 进入容器的 MySQL 终端docker exec -it mysql-server mysql -u root -p# 输入密码后，在 MySQL 终端执行CREATE DATABASE IF NOT EXISTS mydata;#选择库USE mydata\n\nredis相关单独启动redis:8.0镜像\ndocker run  -d  -p 6379:6379  -v /conf/redisconf:/usr/local/etc/redis  -v /data/redisdata:/data --name myredis redis:8.0 redis-server /usr/local/etc/redis/redis.conf\n\n使用compose管理启动docker-compose.yml文件配置\nversion: &#x27;3.8&#x27;#数据库不想暴露端口给外部就去掉port:services:  # Redis服务  redis:    image: redis:8.0    container_name: myredis    restart: always    ports:      - &quot;6379:6379&quot;    volumes:      - /conf/redisconf:/usr/local/etc/redis      - /data/redisdata:/data    command: redis-server /usr/local/etc/redis/redis.conf    networks:      - my-network  # MySQL服务  mysql:    image: mysql:8.0    container_name: mysql-server    restart: always    ports:      - &quot;3306:3306&quot;    volumes:      - /data/mysqldata:/var/lib/mysql      - /conf/mysqlconf:/etc/mysql/conf.d    environment:      MYSQL_ROOT_PASSWORD: djx55707    networks:      - my-network  # Spring Boot应用  app:    build: .    container_name: probationwork-app    restart: always    ports:      - &quot;8080:8080&quot;    depends_on:      - mysql      - redis    networks:      - my-networknetworks:  my-network:    driver: bridge\n\n使用docker-compose.yml文件启动容器\ndocker-compose up -d\n\n停止启动的所有容器\ndocker compose down\n\n\n\nDockerfile文件\nFROM openjdk:24-jdk-slimWORKDIR /appADD probationwork-0.0.1-SNAPSHOT.jar app.jarEXPOSE 8080ENV JWT_KEY=&quot;jhwork&quot;ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]\n\nDocker环境配置优先级关系：\n\ndocker-compose.yml中直接定义的environment最高\n通过.env引入的次之\nDockerfile中的ENV最低\n\n最佳实践：\n\n敏感信息放.env（不提交到Git）\n通用配置放docker-compose.yml\n镜像默认值放Dockerfile\n\n","categories":["部署服务器"],"tags":["docker"]},{"title":"blog搭建","url":"/posts/e6a32f0a.html","content":"","categories":["blog"]}]